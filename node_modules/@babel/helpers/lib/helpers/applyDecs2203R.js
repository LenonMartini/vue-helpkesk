{
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M172.4 27.63c-14.8 7.64-27.9 15.41-40 23.26l-35.02 5.23c6.82 1.77 14.22 3.27 17.02 7.08-8.4 6-16.36 12.08-24.08 18.08-15.9 2.5-27.27 9-38.31 15.7l15.28 2.7C50.7 110.1 42.85 119.9 32.89 135.6l27.97-1.4c4.13 2.5 8.56 5 7.89 8.2-3.07 6.7-3.43 11.4-3.99 17.2l16.09-4.6c10.11 9 12.6 23.1 17.28 35.4 11.37-6 22.97-11.9 29.97-19.9L118 189.6c22.3-10.8 30.5-21.1 48-36-1.4 16.5-2.2 32.8-2.6 49.1-13.8 22.7-17.9 44.9-16.6 68.1 5.5-6.3 11.1-18.3 16.6-12.9 0 4.3.2 8.6.3 12.8-7.2 4-10.2 16.4-14.8 25.5 5.1-2.9 5.1-6.7 15.3-8.7.5 12.1 1.1 24.3 1.8 36.4 22.2 4.6 44.4 6.9 67 7.5 11.7 3.6 19 8.9 25.1 14.7l1.2-14.7c16.1-2.3 29.3 3.8 45.2 8.6l19.3-14.3c4.2-.6 8.5-1.2 12.8-1.8l-1.9 13.2 8.2-14.2c3.1-.5 6.2-1 9.4-1.5.3-3.8.7-7.7 1.1-11.5l17.7 12.8-11.3-34.1 11.3 10.5-13.2-33.3c.5-4.9.9-9.8 1.3-14.6l13.4 14.1c-5.3-33.1-8.5-76.3-14.9-106l16 4.5 27.7 24.3-4-17.5c11.8 2.3 20.7 6 31.8 10.8 12-20.3 7.5-34.4 36.7-40.9l-6.2-29.3c5.3-3.8 13.1-5.2 19.4-7.4-16.3-4.62-30.9-15.02-50.7-31.12l10.2-5.69c-8.2-2.23-19.1.58-26.3-4.08l23.3-13.54c-1.4-.59-35.2-1.37-43.5 2.08-15.3-8.27-32.1-16.12-51.8-23.07-9.3 6.8-11.5 10.51-21.2 15.21l-5.6-10.61c-3.1 8.77-8.9 16.32-16.7 19 1.6-6.34 5.6-19 5.6-19-7.4 8.24-12.9 16.69-26.2 24.26-17.8 2.91-36.5 1.65-56.1-4.8-1.7 7.1.4 13.42 2.1 19.84-12.8-6.1-13.8-16.7-18-26.1-10.3-4.72-20.9-10.86-31.8-18.55zM364.1 357.5c-42.6 10.7-86.9 18.6-129.5 17.1l18.9 13.2-47.6-15.7c-17.7-2.6-35-7.1-51.6-14.1-7.3 10.7-27.3 17-39.7 23.2l26.5-1.3c-6.5 15.7-19.4 27.7-30.6 41 0 0 10.6-2.5 17.1-4.3 27.3 15 56.1 29 67.9 52.7 42.8 22.9 81.8 16.6 119.7 1.8 7.1-11.9 15.7-22.7 26.6-31.9 22.1-5.9 29.6-2 40.4-.3-5.7-5-6.3-11.8-17.4-15 10.8-5.6 23-10 36.9-13.2-3.6-6.5-7.4-13-11.6-19.4l22.3 6.7c-19.5-11.9-34.5-24.9-48.3-40.5z"}}]})(props);
};
module.exports.GiFurnace = function GiFurnace (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M183.8 25l-13.4 94h171.2l-13.4-94H183.8zm-79.5 112L73.82 487H438.2l-30.5-350H104.3zm30.7 62h242v48h32v114h-32v48H135V199zm18 18v174h206v-30h-16V247h16v-30H153zm30 16h146v112H183V233zm74.2 10.7c-6.5 22-24.5 43.6-13.6 66.1-17.8-9.5-20.2-25.1-23.4-40.6-2.2 15.5-9.3 30.8-6.8 45.4-6.3-4.6-11.6-10.9-18.2-18 7 28.2 7.9 35.8 31.8 37.4h51.5c32.1-3.6 26.8-21.3 41-38.2-12.7.4-18.9 4.5-25.8 12.3 10.3-18.7-1.5-18.9-2.7-34.3-5.1 9.8-16.9 20.7-23.3 18.6-8.5-2.6-9.3-30.7-10.5-48.7zM361 265v78h30v-78h-30zM183 432h18v32h-18v-32zm64 0h18v32h-18v-32zm64 0h18v32h-18v-32z"}}]})(props);
};
module.exports.GiGClef = function GiGClef (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M238.75 138.492l18.147-18.829c.898-21.472 9.107-59.37 26.166-60.771 6.994.097 14.566 5.833 15.742 16.021 3.25 28.145-11.833 40.563-29.072 57.372l-31.408 32.586-.037-.038c-28.467 31.447-65.355 70.37-69.772 106.973-5.588 53.77 31.264 108.42 87.149 105.693l-3.178-18.066c-37.522-4.905-69.771-43.77-56.711-81.312 23.275-60.413 75.664-92.822 116.333-148.022 11.474-15.574 14.575-46.945 11.815-63.128-2.76-16.184-14.345-43.066-32.059-45.017-34.714-4.59-60.724 62.476-53.114 116.538zm25.667 75.896l-15.508 15.248c.542 2.775 1.166 6.185 2.088 12.14-34.017 21.505-36.576 66.707-12.186 90.96 5.177 5.31 15.165-2.767 10.104-8.674-10.971-19.786-12.097-44.028 5.742-57.137 8.78 50.539 24.627 117.16 30.164 170.895.364 3.535-6.593 10.614-9.973 11.396 0-22.091-17.908-40-40-40-22.09 0-40 17.909-40 40 .017 20.193 15.266 36.007 35.123 39.668 42.008 7.745 78.659-17.935 72.76-53.16-8.793-59.062-21.986-121.007-30.857-175.32 12.066-1.253 28.875 5.169 36.428 12.847 8.575 9.297 12.95 22.35 11.982 32.787-.924 9.96-7.425 20.992-17.06 30.381l3.662 20.776c17.346-12.583 35.117-30.185 36.94-49.844 1.518-16.352-5.01-40.324-18.08-52.273-16.885-15.437-38.313-18.553-57.349-16.612-2.004-13.065-3.018-18.039-3.98-24.078z"}}]})(props);
};
module.exports.GiGalaxy = function GiGalaxy (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M342.5 17.9c-3.1 11.63-2.2 21.56-23.8 25.11 20.3-2.7 22.3 9.58 24.8 21.49-2.8 1.94-5.5 4.11-8.1 6.49-21.9 20.84-33 41.11-49 61.61-6.3 1.2 5.3-53.52 31.1-79.87C225.1 40.92 207.6 268.4 236.4 275c-51.7 18.4-72.6-98.3-59.4-157.3-37.1 3.9-62 39.8-67.9 60 2.8 27.1 6.1 55.1 38.7 80.9-32.1 3.6-42-27.8-55.31-54C13.9 309.5 198.4 311.4 228.5 299.1c-93 70.5-149.62 52.3-196.77 39-40.48 85.1 61.46 56 107.57 35.7-18.4 30.7-72.25 37.6-88.92 41 61.62 51.3 174.42-67 200.02-106.5 2.5 65.7-74.3 134.4-122.8 171.7 43.6 2.2 83.2-17.9 102.4-55.5 0 10.1-4.1 22.6-9.6 35.8 15-2.1 39.6-6.2 48.8-24.2 25-54.1 37.8-93.1 15.3-138.2 29.9 33.5 63.6 65.3 58.4 114.5 26.9-15.6 48.8-33.6 24.7-60.1 14.1 1.4 23.6 7.7 32.8 13.7 13.9-2.8 34.4-19.9 33.7-33-31.6-29.8-83.4-43.7-133.8-55.9 72.1-19.8 136.9-10.1 175.6 5.6 5-11.7 9.4-29.6 5.9-41.9-16.4-9.7-62.7-7.8-83.3-5.6 17.7-15.7 56.8-21.1 81.3-21.2-2-67.7-162.6 27.8-182.2 42.8 32.7-59.1 123.2-112.7 178.7-121.1-13.2-31.1-37.2-34-64.3-22.4 2.4-9.5 6.7-17.49 23.4-15.29-21.6-3.51-20.7-13.44-23.8-25.07-2.4 13.55-4.1 17.11-19.4 26.67 14.3-2.17 16.4 6.69 17.4 14.69-53.5 24.4-117.8 102.8-135.1 132.5-22.1-24 51-121.5 107.7-187.46-3.1-9.48-21.8-6.31-38.2 4.81 1.1-8.63.7-22.16 17.9-19.54-15.3-9.6-17-13.16-19.4-26.71zm-166.3.3c5.4 10.73 12.7 17.53-1 34.56 13.8-16.07 23.7-7.13 33.9.22-4.6-7.19-16.3-17.67-.7-27.86-17.8 3.09-21.4 1.57-32.2-6.92zM47.71 26.61c-3.08 11.63-2.13 21.56-23.76 25.05 21.02-2.74 22.39 10.55 25.06 22.81 1.43-8.43-.28-23.97 18.14-21.16-15.27-9.59-16.98-13.15-19.44-26.7zm419.39 5.5c1.6 10.83 1.3 13.93-7.8 25.07 13.1-6.8 15.9 5.39 19.1 11.38-1.2-9.97-3.4-20.36 13.1-23.64-17.2 2.87-19.1-4.85-24.4-12.81zM125.3 84.28c-.6 18.02-12 17.32-22.7 17.92 7 2.4 20.3 3 15.3 18.2 10.2-11.6 13.3-12.5 25.2-12.6-9.4-4.3-17.8-4.9-17.8-23.52zM71.21 153.9c-8.61 8.5-12.85 17.5-33.24 9.6 19.47 8.3 13.98 20.4 10.08 32.4 5.46-6.6 11.9-20.9 26.35-9.1-8.38-16-8.02-19.9-3.19-32.9zM453.9 282.7c-2.4 8.9-1.7 16.5-18.2 19.2 16-2.1 17.1 8.1 19.2 17.5 1.1-6.5-.2-18.4 13.8-16.3-11.7-7.3-13-10-14.8-20.4zM69.25 293.8c-12.82 12.7-16.72 13.5-30.41 12.7 10.55 5.7 20.39 7.1 18.72 29 2.3-21.1 15.46-19.4 28.05-19.1-7.83-3.3-23.4-5.3-16.36-22.6zm394.55 50.7c3.1 11.6 8.9 19.7-8 33.6 16.8-12.9 24.6-2.2 33.2 7.1-3.1-8-12.4-20.6 4.9-27.4-18-.5-21.3-2.8-30.1-13.3zm-139.2 72.1c-2.7 12.3-4.1 25.5-25.1 22.8 21.6 3.5 20.7 13.4 23.8 25 2.4-13.5 4.1-17.1 19.4-26.6-18.4 2.8-16.7-12.8-18.1-21.2zM83.9 438.2c-2.83 16-4.84 20.2-22.86 31.5 21.68-3.3 19.67 15.1 21.33 25 3.19-14.5 4.84-30.1 29.63-26.9-25.5-4.2-24.43-15.9-28.1-29.6zm366.2 11.4c-7.3 9.6-10.2 19.1-31.5 14.2 20.4 5.4 16.8 18.1 14.6 30.6 4.5-7.3 8.8-22.4 24.8-12.8-10.6-14.6-10.8-18.6-7.9-32z"}}]})(props);
};
module.exports.GiGalea = function GiGalea (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M300.042 21.781l-15.452 3.323c.991 11.046 1.224 22.188.395 33.404a295.23 295.23 0 0 1 9.748-.45c4.547-.133 9.024-.14 13.434-.032-5.904-11.04-8.3-23.49-8.125-36.245zm4.074 52.17c-2.93-.021-5.9.013-8.912.102-36.62 1.08-71.784 8.384-98.162 36.432-25.9 27.539-44.322 76.538-44.545 163.273 12.01 8.89 30.08 14.212 46.148 13.256l.951 15.973c-19.271 1.147-39.495-4.282-54.84-15.053-21.422 13.662-48.859 33.022-71.234 50.79-11.88 9.435-22.335 18.432-29.54 25.659-3.604 3.614-6.394 6.81-8.044 9.13-1.057 1.488-1.386 2.606-1.52 2.813.366 3.131 3.104 10.505 9.284 18.551 6.533 8.506 16.495 17.985 29.781 26.287 26.572 16.606 66.346 28.707 119.94 20.381 4.859-.755 7.668-.865 9.17-1.525 1.501-.66 3.246-1.79 6.162-7.678 5.831-11.778 13.434-40.613 23.693-102.398 1.83-11.021.47-27.932 1.558-43.538.545-7.802 1.688-15.427 4.924-22.306 3.237-6.88 9.209-12.992 17.465-15.492 4.761-1.443 14.762-5.832 25.74-2.088 5.49 1.872 10.748 6.105 14.426 12.42 3.432 5.892 5.72 13.595 7.04 23.63.406.17.595.31 1.687.532 3.36.682 9.389.905 16.705.37 14.632-1.067 34.675-4.877 54.506-10.507 19.83-5.63 39.569-13.128 53.713-21.139 7.071-4.005 12.718-8.168 16.195-11.863 3.476-3.695 4.496-6.492 4.45-8.324-.434-16.752-2.2-32.102-5.194-46.086-54.511 24.527-121.417 29.581-172.121 27.324l.713-15.984c56.827 2.53 135.288-5.369 188stingKind = existingNonFields.get(name) || 0;
        if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
          throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name);
        } else if (!existingKind && kind > 2) {
          existingNonFields.set(name, kind);
        } else {
          existingNonFields.set(name, true);
        }
      }
      applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers);
    }
    pushInitializers(ret, protoInitializers);
    pushInitializers(ret, staticInitializers);
    return ret;
  }
  function pushInitializers(ret, initializers) {
    if (initializers) {
      ret.push(function (instance) {
        for (var i = 0; i < initializers.length; i++) {
          initializers[i].call(instance);
        }
        return instance;
      });
    }
  }
  function applyClassDecs(targetClass, classDecs) {
    if (classDecs.length > 0) {
      var initializers = [];
      var newClass = targetClass;
      var name = targetClass.name;
      for (var i = classDecs.length - 1; i >= 0; i--) {
        var decoratorFinishedRef = {
          v: false
        };
        try {
          var nextNewClass = classDecs[i](newClass, {
            kind: "class",
            name: name,
            addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef)
          });
        } finally {
          decoratorFinishedRef.v = true;
        }
        if (nextNewClass !== undefined) {
          assertValidReturnValue(10, nextNewClass);
          newClass = nextNewClass;
        }
      }
      return [newClass, function () {
        for (var i = 0; i < initializers.length; i++) {
          initializers[i].call(newClass);
        }
      }];
    }
  }
  return function applyDecs2203R(targetClass, memberDecs, classDecs) {
    return {
      e: applyMemberDecs(targetClass, memberDecs),
      get c() {
        return applyClassDecs(targetClass, classDecs);
      }
    };
  };
}
function applyDecs2203R(targetClass, memberDecs, classDecs) {
  return (exports.default = applyDecs2203R = applyDecs2203RFactory())(targetClass, memberDecs, classDecs);
}

//# sourceMappingURL=applyDecs2203R.js.map
